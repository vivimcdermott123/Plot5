using ITensors
using ITensorMPS
using Plots
using Random

# Construct the Heisenberg Hamiltonian as an MPO
function heisenberg_mpo(N; J=1.0, S="S=1/2")
    sites = siteinds(S, N)
    os = OpSum()
    for i in 1:N-1
        os += 0.5J, "S+", i, "S-", i+1
        os += 0.5J, "S-", i, "S+", i+1
        os += J, "Sz", i, "Sz", i+1
    end
    return MPO(os, sites), sites
end

# Run DMRG given an initial product state
function run_dmrg(H, psi0; maxdim=100, nsweeps=10, cutoff=1e-10)
    sweeps = Sweeps(nsweeps)
    setmaxdim!(sweeps, maxdim)
    setcutoff!(sweeps, cutoff)
    energy, psi = dmrg(H, psi0, sweeps)
    return energy, psi
end

# Initialize state with fixed number of up spins (total Sz)
function initial_state_fixed_sz(sites, nup)
    N = length(sites)
    return [i <= nup ? "Up" : "Dn" for i in 1:N]
end

# Initialize random state in the correct Sz sector
function random_state_fixed_sz(sites, nup)
    N = length(sites)
    state_array = fill("Dn", N)
    up_positions = randperm(N)[1:nup]
    for pos in up_positions
        state_array[pos] = "Up"
    end
    return MPS(sites, state_array)
end

# FIXED: Proper magnetization profile calculation
function magnetization_profile(psi, sites)
    N = length(sites)
    magnetization = zeros(Float64, N)
    
    for i in 1:N
        # Calculate ⟨Sz⟩ at site i
        orthogonalize!(psi, i)
        magnetization[i] = real(scalar(dag(psi[i]) * op(sites, "Sz", i) * psi[i]))
    end
    
    return magnetization
end

# FIXED: Find excited state using excited state DMRG
function find_excited_state(H, sites, ground_state; maxdim=100, nsweeps=10)
    N = length(sites)
    nup = div(N, 2)  # Same Sz sector as ground state
    
    # Create initial state - try a different configuration in same Sz sector
    # Use antiferromagnetic-like initial state
    initial_config = [(i % 2 == 1) ? "Up" : "Dn" for i in 1:N]
    # Adjust to get correct number of up spins
    up_count = sum(initial_config .== "Up")
    if up_count > nup
        # Convert some ups to downs
        for i in 1:N
            if initial_config[i] == "Up" && sum(initial_config[1:i] .== "Up") > nup
                initial_config[i] = "Dn"
            end
        end
    elseif up_count < nup
        # Convert some downs to ups
        for i in 1:N
            if initial_config[i] == "Dn" && sum(initial_config[1:i] .== "Up") < nup
                initial_config[i] = "Up"
            end
        end
    end
    
    psi0 = MPS(sites, initial_config)
    
    # Use excited state DMRG with the ground state as a penalty
    energy, psi = dmrg(H, [ground_state], psi0; nsweeps=nsweeps, maxdim=maxdim, weight=20.0)
    
    return energy, psi
end

# Main function to plot magnetization comparison
function plot_magnetization_comparison()
    L = 10
    H, sites = heisenberg_mpo(L)
    # Ground state (Sz = 0)
 #   println("Finding ground state...")
#    psi0_gs = MPS(sites, initial_state_fixed_sz(sites, div(L,2)))
#    E_gs, psi_gs = run_dmrg(H, psi0_gs; maxdim=100, nsweeps=20)
    
    # Excited state (Sz = +1/2)
 #   println("Finding excited state...")
#    E_ex, psi_ex = find_excited_state(H, sites, E_gs; maxdim=100, nsweeps=20)
    
    # Calculate magnetization profiles
    mag_gs = magnetization_profile(psi_gs, sites)
    mag_ex = magnetization_profile(psi_ex, sites)
    
    # Create plot
    plt = plot(1:L, mag_gs, label="Ground State", xlabel="Site",
        ylabel="⟨Sz⟩", title="Magnetization: Ground vs Excited State", 
        marker=:o, linewidth=2, markersize=6
